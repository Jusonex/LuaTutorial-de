extends content

block body
  h1#functions Funktionen
  h3#motivation Motivation
  p.
    Oft ist man in der Situation, dass ein bestimmer Codeteil an bestimmten Stellen immer wieder benötigt wird (z.B. eine komplexere Berechnung).
    Diesen Code jedes Mal komplett zu kopieren würde nicht nur viele unnötige Codezeilen erzeugen, sondern auch die Wartbarkeit erheblich verringern, da im Falle eines Bugs in
    diesem Codeteil alle Stellen gefunden und repariert werden müssen, obwohl es sowieso überall der gleiche Code ist.<br/>
    Wie sich jetzt leicht vermuten lässt, lösen Funktionen dieses Problem.
    
  h3#parameter Parameter
  p.
    In vielen Fällen ist der Code in einer Funktion von zusätzlichen Eingaben abhängig. Damit nicht für jeden nur erdenklichen Fall dieser abhängigen Werte eine eigene Funktion
    geschrieben werden muss, wurden die sogenannten <strong>(Funktions-)parameter</strong> eingeführt.
    
  h3#return Rückgabewert
  p.
    Da in den meisten Fällen nicht nur eine bestimmte Prozedur ausgeführt wird, muss eine Funktion nicht nur Eingaben (über Parameter), sondern auch <strong>Ausgaben</strong> erzeugen können.
    Dazu gibt es die sogenannten <strong>Rückgabewerte</strong>.

  h3#syntax Syntax
  div.executor
    label Beispiel zu Funktionen
    pre.
      -- Funktionen mit dem Namen "meineFunktion" definieren
      function meineFunktion(parameter1, parameter2) -- mit 2 Eingaben
        -- beide Parameter (Eingaben) addieren und in Variable "ergebnis" speichern
        local ergebnis = parameter1 + parameter2
        
        -- hier kann nahezu jeder beliebige Code stehen
        
        -- Rückgaben werden mit dem "return" Schlüsselwort angegeben
        return ergebnis
      end
      
      -- Jetzt die Funktion "aufrufen"
      local rueckgabe = meineFunktion(1, 3)
      print(rueckgabe)

  p.
    Funktionen werden mit dem Schlüsselwort <code>function</code> eingeleitet, direkt gefolgt vom Namen der Funktion.
    Danach folgen in runden Klammern die Namen der Parameter. Die Parameter verhalten sich innerhalb der Funktion genauso wie lokale Variablen.<br/>
    Schließlich wird mit dem Schlüsselwort <code>return</code> die <i>lokale</i> Variable <code>ergebnis</code> zurückgegeben.

  p.
    Der Aufruf der Funktion sollte dir von der Funktion <code>print</code> bekannt vorkommen, die uns schon die ganze Zeit begleitet hat.
    Hier wird ganz intuitiv der Name der Funktion, gefolgt von runden Klammern, zwischen denen sich die Eingaben/Parameter der Funktion befinden, geschrieben.
    Dabei können natürlich sowohl Variablen als auch direkt Werte (<i>Literale</i>) übergeben werden.
    
  div.alert.alert-info
    <strong>Pro tip:</strong> Es können in Lua auch mehrere Werte zurückgegeben werden, indem diese mit Kommata separiert hintereinander nach dem <code>return</code>-Schlüsselwort aufgelistet werden

  h3#exercise Übung
  h4 Teil 1
  p In dieser Aufgabe soll eine Funktion geschrieben werden, die 2 beliebige Variablen (Zahlen) als Parameter der Funktion <i>a</i> und <i>b</i> addiert, anschließend mit 2 multipliziert und zurückgibt.
  div.solution
    div.content
      div.executor
        label Einfache Funktion
        pre.
          -- Funktion mit 2 Paramtetern a und b definieren
          function addAndMultiply(a, b)
            -- Da a + b zuerst gerechnet werden soll und Punkt vor Strichrechnung gilt, muss a + b geklammert werden
            return (a + b) * 2
          end
          
          -- Funktion aufrufen (Test) und Ergebnis ausgeben
          print(addAndMultiply(2, 3)) -- erwartetes Ergebnis (2 + 3)*2 = 5*2 = 10
  
  h4 Teil 2
  p.
    In dieser Aufgabe sollen mehrere Elemente geübt werden. Dazu wird folgende Situation angenommen: Wir entwickeln ein Computerspiel und müssen dazu eine Funktion namens "checkGateAccess" für ein Tor schreiben,
    das nur für bestimmte Spielernamen auf geht.
    Durch den Rest des Scriptes ist vorgegeben, dass das Tor nur auf geht, wenn unsere Funktion den Wahrheitswert <code>true</code>, also wahr, zurückgibt.
    Anschließend soll die Funktion mit den Namen "Harry", "Günther", "Fritz" und "Shantal" getestet werden, wobei nur "Fritz" und "Shantal" das Tor öffnen können.
  
  div.solution
    div.content
      div.executor
        label Eine Torfunktion
        pre.
          function checkGateAccess(name)
            if name == "Fritz" or name == "Shantal" then
              print("Tor auf")
              return true
            else
              print("Tor zu")
              return false
            end
          end

          -- Testen
          print(checkGateAccess("Harry"))
          print(checkGateAccess("Günther"))
          print(checkGateAccess("Fritz"))
          print(checkGateAccess("Shantal"))
